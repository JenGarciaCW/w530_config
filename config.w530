Debian: 10+
================================================================
			Aptitude
================================================================
    #  apt-get update
    #  apt-get install aptitude
    #  aptitude update

================================================================
			Drivers Nvidia
================================================================
<https://wiki.debian.org/es/NvidiaGraphicsDrivers#Debian_9_.22Stretch.22>

1. Add contrib non free to the first two mirrors in /etc/apt/sources.list
    #  aptitude update
    #  apt-get update
    #  apt-get upgrade
    #  apt-get dist-upgrade
    #  aptitude -r install linux-headers-$(uname -r|sed 's,[^-]*-[^-]*-,,') nvidia-driver
    #  mkdir /etc/X11/xorg.conf.d
    #  echo -e 'Section "Device"\n\tIdentifier "My GPU"\n\tDriver "nvidia"\nEndSection' > /etc/X11/xorg.conf.d/20-nvidia.conf
    #  reboot 
*If issues arrise - old Kernel version look at 
# less /var/log/lightdm/lightdm.log
# less /var/log/lightdm/x-0.log
# less /var/log/Xorg.0.log
# apt-get update
# apt-get upgrade 
# aptitude safe-upgrade 
# reboot 

================================================================
			CUDA
===============================================================
<https://wiki.debian.org/es/NvidiaGraphicsDrivers#Debian_9_.22Stretch.22-1>
# apt-get install nvidia-cuda-dev nvidia-cuda-toolkit  nvidia-driver

*I'm not able to build examples!
Example:
https://devblogs.nvidia.com/easy-introduction-cuda-c-and-c/

===============================================================
		sudo
===============================================================
ACTION: instalar sudo
#apt-get install sudo
#visudo 
ACTION: Agregar user_name   ALL=(ALL:ALL) ALL




===============================================================
		Cross-Compilador
===============================================================

ACTION: Instalar compilador
$ sudo apt-get install build-essential 

ACTION: Instalar cross-compilador
$ sudo apt-get update 
$ sudo dpkg --add-architecture armhf
$ sudo apt-get install crossbuild-essential-armhf 

================================================================
				i3-wm
================================================================

ACTION: instalar i3
# apt-get instal i3


===============================================================
		Opencv
===============================================================

https://docs.opencv.org/3.2.0/d7/d9f/tutorial_linux_install.html
$ cd opencv/platforms/linux/

ACTION: Compilar e instalar opencv
$ mkdir -p build_hardfp
$ cd build_hardfp
$ cmake -DCMAKE_TOOLCHAIN_FILE=../arm-gnueabi.toolchain.cmake ../../..
$ make
$ sudo make install



# update-grub
# reboot

================================================================
			Wifi y trackpoint
================================================================

ACTION: Instalar firmware wifi
# apt-get update && apt-get install firmware-iwlwifi

ACTION: Crear archivo /usr/share/X11/xorg.conf.d/20-thinkpad.conf

 Section "InputClass"
     Identifier "Trackpoint Wheel Emulation"
     MatchProduct       "TPPS/2 IBM TrackPoint|DualPoint Stick|Synaptics Inc. Composite TouchPad / TrackPoint|ThinkPad USB Keyboard with TrackPoint|ThinkPad Compact USB Keyboard with TrackPoint|USB Trackpoint pointing device"
     MatchDevicePath    "/dev/input/event*"
     Option             "EmulateWheel"          "true"
     Option             "EmulateWheelButton"    "2"
     Option             "Emulate3Buttons"       "false"
     Option             "XAxisMapping"          "6 7"
     Option             "YAxisMapping"          "4 5"
 EndSection


================================================================
			Eclipse last
================================================================

ACTION: Descargar última versión de eclipse
ACTION: Descomprimir archivo 
# cd Downloads/
# tar xf eclipse*.tar.gz

ACTION: Mover y crear link simbólico
# mv eclipse /opt
# ln -s /opt/eclipse/eclipse /usr/local/bin/eclipse

================================================================
			Devices
================================================================
ACTION: Instalar Joystick
# apt-get install joystick

ACTION: Instalar controlador cámara REFLEX
# apt-get install gphoto2

ACTION: Instalar video 4 linux
# apt-get install v4l-utils

# arp-scan (scanning network for devices)
 sudo apt-get install arp-scan
 


ACTION: Configurar DPI monitor
ACTION: Editar /etc/X11/xorg.conf y agregar en la sección
"Monitor" 
	Option         "DPI" "90x90"

ACTION: Control de brillo
# sudo apt-get install xbacklight

ACTION: Emulador ARM
$ sudo apt-get install qemu-user-static 

================================================================
			i3
================================================================

ACTION: Script problemas firmware
+crear firmscript.sh : echo reset > /proc/acpi/ibm/hotkey 
# mv firmscript.sh /opt
# ln -s /opt/firmscript.sh /usr/local/bin/firmscript

ACTION: Agregar comando a /etc/rc.local
# chmod 777 /proc/acpi/ibm/hotkey

ACTION: Crear archivo de configuración
# i3-config-wizard

ACTION: Habilitar teclas especiales añadiendo a ~/.i3/config

#Thinkpad
bindsym XF86AudioRaiseVolume exec amixer -q sset Master 5%+ unmute
bindsym XF86AudioLowerVolume  exec amixer -q sset Master 5%- unmute
bindsym XF86AudioMute exec amixer -q sset Master toggle

# Sreen brightness controls
bindsym XF86MonBrightnessUp exec xbacklight -inc 20 # increase screen brightness
bindsym XF86MonBrightnessDown exec xbacklight -dec 20 # decrease screen brightness

# PrintScreen
bindsym Print exec xfce4-screenshooter -f -s /home/kevin/temp/

# Thunar
bindsym XF86Launch1 exec thunar

# Eclipse
bindsym XF86AudioMute exec eclipse

# nm-applet
exec nm-applet

# firmware correction
exec firmscript



================================================================
			Eclipse Config
================================================================
ACTION: Crear un proyecto nuevo en eclipse, de tipo cross linux
agregar al final de la configuración el prefijo
	arm-linux-gnueabi-
y en cross compiler path
	/usr/bin 

ACTION: Ir a Help>Install New Software y seleccionar el Release
de eclipse, ir a General Prupose Tools e instalar Remote 
System Explorer y Remote System Shell.

ACTION: Ir a Window>Show view> other> y seleccionar Remote 
Systems

ACTION: Agregar conexión con ssh y shell configurations

ACTION: Ir a Help>Install new software y agregar
	EGIT - http://download.eclipse.org/egit/updates
	Instalar todos los paquetes

ACTION: Ir a Window>Show view> other> y seleccionar Git Repos
ACTION: Clone Git Repository https://github.com/KevinArias/Enjambre_Kernel.git


================================================================
			Lid suspend PC
================================================================
$ sudo nano /etc/systemd/logind.conf 
	uncomment 	HandleLidSwitch=ignore
			HandleLidSwitchDocked=ignore

$ sudo systemctl restart systemd-logind.service 
================================================================
			jenkins
================================================================
https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Ubuntu

================================================================
			Freecad
================================================================
sudo apt-get install freecad 

================================================================
			Atom
================================================================
https://flight-manual.atom.io/getting-started/sections/installing-atom/

================================================================
			Arduino
================================================================
sudo apt-get install arduino

================================================================
			Kicad
================================================================
http://kicad-pcb.org/download/debian/

================================================================
			Octave
================================================================
https://wiki.octave.org/Octave_for_Debian_systems

================================================================
			Virtual box
================================================================
https://wiki.debian.org/VirtualBox#Debian_9_.22Stretch.22

================================================================
			LaTex
================================================================
sudo apt-get install texworks

================================================================
			JabRef
================================================================
sudo apt-get install jabref 

================================================================
			Code Composer


ROS

================================================================
			background grub
================================================================
			nodejs
================================================================
			Energia
			
			
================================================================
			mount permissions
================================================================
# nano /etc/polkit-1/localauthority/50-local.d/55-storage.pkla

[Storage Permissions]
Identity=unix-user:USER
Action=org.freedesktop.udisks2.filesystem-mount;org.freedesktop.udisks2.filesystem-mount-system
ResultAny=yes
ResultInactive=yes
ResultActive=yes



	
	


$sudo ldconfig


================================================================
			terminal transparency
================================================================
sudo apt-get install xcompmgr
sudo apt-get install feh
# in .config/i3/config - to enable composition manager
exec_always feh --bg-scale <path to background>
exec_always xcompmgr &

# in .bashrc - to enable 75% transparency  185  ls -la

if [ "${DESKTOP_SESSION}" == "i3" ]; then
  transset -a --dec 0.25 &> /dev/null # default value is 1, with --dec 0.25 it stays at 0.75
fi

================================================================
			go install
================================================================
wget https://dl.google.com/go/go1.14.3.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.14.3.linux-amd64.tar.gz 
# Add to /etc/profile file
# export PATH=$PATH:/usr/local/go/bin

mkdir go
cd go/
go get -u github.com/nsf/gocode

# Add following lines in .bashrc
#   export GOPATH=$HOME/go
# export PATH=$PATH:$GOPATH/bin

================================================================
			node config
================================================================
sudo tar -C /usr/local --strip-components=1 -xvf node-v12.17.0-linux-x64.tar.xz 


================================================================
			vim config
================================================================
#Vim building
sudo apt-get install libncurses5-dev libncursesw5-dev
sudo apt-get install python-dev python-pip
sudo apt-get install cmake
sudo apt-get install python3.7-dev 
sudo apt-get install libx11-dev 
sudo apt-get install libxt-dev
sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev


git clone https://github.com/vim/vim.git
cd vim/src/
./configure --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu --with-python3-config-dir=/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu --enable-pythoninterp --enable-python3interp --enable-gui=auto --enable-gtk2-check --enable-gnome-check --with-features=huge 
make
sudo make install

# YCMe building
npm install --save-dev stylelint stylelint-config-standard
npm install eslint --save-dev
cd .vim/bundle/YouCompleteMe/
python3.7 install.py --clang-completer --all --clang-tidy --java-completer --go-completer
sudo apt-get install linux-headers-amd64 linux-headers-4.19.0-6-amd64 

#Taskwiki
sudo apt-get install python-pip
sudo apt-get install python3-pip
sudo pip3 install --upgrade git+git://github.com/robgolding63/tasklib@develop

# For C projects to work with ctags
sudo apt-get install universal-ctags 
sudo apt-get install exuberant-ctags 
ctags -R .

# For python syntax
sudo apt-get install pylint pylint3 
sudo apt-get install flake8

# For java autocompletion
sudo apt-get install openjdk-8-jre
sudo apt-get install openjdk-11-jre
sudo apt-get install maven

# in .bashrc add following line to support mount VM in Java 11
# export JDK_JAVA_OPTIONS="-Djdk.attach.allowAttachSelf=true"


# in .vim/bundle/vim-javacomplete2/pom.xml add the dependency
+        <dependency>
+           <groupId>org.jacorb</groupId>
+           <artifactId>jacorb-omgapi</artifactId>
+           <version>3.8</version>
+        </dependency>
$ mvn clean compile test

# Add text to ~/.tern-config and ~/.tern-project
{
  "libs": [
    "browser",
    "ecmascript",
    "jquery",
    "react",
    "underscore"
  ],
  "plugins": {
    "node": {},
    "esmodules": {}
  }
}


